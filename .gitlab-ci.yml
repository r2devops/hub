stages:
  - static_tests
  - merge_tests
  - project_setup
  - deploy
  - .after-deploy

include:
  - remote: 'https://api.r2devops.io/job/r/gitlab/r2devops/hub/links_checker@0.2.0.yml?ignore=true.yml'
  - remote: 'https://api.r2devops.io/job/r/gitlab/r2devops/hub/codespell@0.2.1.yml?ignore=true.yml'
  - remote: 'https://api.r2devops.io/job/r/gitlab/r2devops/hub/template_release@0.2.0.yaml?ignore=true.yml'

variables:
  IMAGE_TAG_PYTHON_ALPINE: "alpine3.16"
  IMAGE_TAG_HTTPIE_ALPINE: "3.2.1"
  JOB_FILES_EXTENSION: ".yml"

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

ci_linter:
  stage: static_tests
  image:
    name: alpine/httpie:${IMAGE_TAG_HTTPIE_ALPINE}
    entrypoint: [""]
  variables:
    GITLAB_CI_LINT_URLS: "https://gitlab.gnome.org https://git.pleroma.social https://0xacab.org https://git.silence.dev"
    GITLAB_API_POSTFIX: "/api/v4/ci/lint?include_merged_yaml=true"
  script:
    - apk add --no-cache jq git
    - mkdir ci_linter_reports
    # Get all changed files that match templates yaml in the current branch
    - git fetch
    - JOBS_TEMPLATE_CHANGED=$(git diff-tree --no-commit-id --name-only -r origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME -r $CI_COMMIT_SHA | tr ' ' '\n' | grep "jobs/.*${JOB_FILES_EXTENSION}$" | tr '\n' ' ')
    - for JOB_PATH in $JOBS_TEMPLATE_CHANGED; do
    # Check if the file still exists in the current branch and ignore it if it doesn't
    -   if ! git ls-files --error-unmatch ${JOB_PATH} > /dev/null 2>&1; then
    -     echo "👎 job ${JOB_PATH} has been deleted"
    -     continue
    -   fi
    -   echo "Start checking ${JOB_PATH} using Gitlab CI linter API"
    -   JOB=$(basename ${JOB_PATH})
      # Loop over all GitLab CI linter API URLs until one of them is working
    -   for CI_URL in ${GITLAB_CI_LINT_URLS}; do
    -     GITLAB_CI_LINT_URL="${CI_URL}${GITLAB_API_POSTFIX}"
    -     if jq --null-input --arg yaml "$(cat ${JOB_PATH})" '.content=$yaml' | http --print 'b' --check-status "$GITLAB_CI_LINT_URL" Content-Type:"application/json" > ci_linter_reports/${JOB}.json; then
    -       if [ $(jq -r '.status' ci_linter_reports/${JOB}.json) == "valid" ]; then
    -         echo "👍 job ${JOB_PATH} is valid"
    -       else
    -         echo "👎 job ${JOB_PATH} is invalid"
    -         jq '.' ci_linter_reports/${JOB}.json
    -         exit 1
    -       fi
          # If the API URL is working, stop the loop
    -       break
    -     fi
    -   done
    - done
  artifacts:
    expose_as: "job_ci_lint"
    paths:
      - ci_linter_reports/
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - changes:
      - "jobs/**/*${JOB_FILES_EXTENSION}"

.job_image_scan:
  image: docker:20.10
  stage: static_tests
  services:
    - name: docker:20.10-dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    PIPENV_PIPFILE: tools/job_image/Pipfile
    JOB_LOGFILE: "job_image.log"
    OUTPUT_DIR: "scan_output"
    PYTHONPATH: "./:$PYTHONPATH"

    TRIVY_EXIT_ON_SEVERITY: ""
    TRIVY_SEVERITY: "HIGH,CRITICAL"
    TRIVY_EXIT_CODE: "0"
    TRIVY_VULN_TYPE: "os,library"
    TRIVY_NO_PROGRESS: "false"
    TRIVY_OUTPUT: "junit-report.xml"
    TRIVY_IGNOREFILE: .trivyignore
    TRIVY_CACHE_DIR: .trivycache/
    TRIVY_FORMAT: "template"
    TEMPLATE_NAME: "junit.tpl"
    TRIVY_CLEAR_CACHE: "false"
    TRIVY_IGNORE_UNFIXED: "false"
    TRIVY_DEBUG: "false"

    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    TRIVY_VERSION: "0.36.1"
    TRIVY_REMOTE: ""
    TRIVY_TIMEOUT: ""
    TRIVY_LIGHT: "false"
    TRIVY_DOWNLOAD_DB_ONLY: "false"
    TRIVY_TOKEN: ""
    TRIVY_QUIET: "false"
    TRIVY_SKIP_UPDATE: "false"

    SCAN_ALL_IMAGES: "false"
  before_script:
    - apk add --no-cache python3 py3-pip git
    - pip install --ignore-installed distlib pipenv
    - pipenv install

    - wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
    - tar zxvf trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz
    - wget -O $TEMPLATE_NAME https://github.com/aquasecurity/trivy/raw/v${TRIVY_VERSION}/contrib/junit.tpl
    - mkdir -p ${OUTPUT_DIR}/jobs
  script:
    # We force database download once so we don't do much GitHub Api calls
    - ./trivy --cache-dir ${TRIVY_CACHE_DIR} image --download-db-only
    - if [ "${SCAN_ALL_IMAGES}" = "true" ]; then
    -   JOBS=$(ls -A jobs)
    - else
    # Retrieve the list of jobs that have been modified in the current branch and keep only the job name
    -   git fetch
    -   if [ -z ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} ]; then
    -     exit 0
    -   fi
    -   JOBS=$(git diff-tree --no-commit-id --name-only -r origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME -r $CI_COMMIT_SHA | tr ' ' '\n' | grep "jobs/.*${JOB_FILES_EXTENSION}$" | tr '\n' ' ' | cut -d'/' -f2)
    - fi
    - for JOB in $JOBS; do
    # Check if the file still exists in the current branch and ignore it if it doesn't
    -   if ! git ls-files --error-unmatch ${JOB} > /dev/null 2>&1; then
    -     echo "👎 job ${JOB} has been deleted"
    -     continue
    -   fi
    -   IMAGE=$(pipenv run python3 tools/job_image/job_image.py ${JOB})
    -   if [ ! -z ${IMAGE} ]; then
    -     NAME=$(basename ${IMAGE})
    -     ./trivy image --template "@${TEMPLATE_NAME}" --security-checks vuln --vuln-type ${TRIVY_VULN_TYPE} --offline-scan --cache-dir ${TRIVY_CACHE_DIR} -o ${OUTPUT_DIR}/${NAME}.${TRIVY_OUTPUT} ${IMAGE}
    -     ./trivy image --security-checks vuln --cache-dir ${TRIVY_CACHE_DIR} --offline-scan -f json -o ${OUTPUT_DIR}/jobs/${JOB}.json ${IMAGE}
    -     if [ ! -z ${TRIVY_EXIT_ON_SEVERITY} ]; then
    -       ./trivy image --template "@${TEMPLATE_NAME}" --security-checks vuln --vuln-type ${TRIVY_VULN_TYPE} --offline-scan --cache-dir ${TRIVY_CACHE_DIR} --exit-code 1 --severity ${TRIVY_SEVERITY} -o ${OUTPUT_DIR}/${NAME}-failed-${TRIVY_OUTPUT} ${IMAGE}
    -     fi
    -   fi
    -   IMAGE=""
    - done
  cache:
    paths:
      - "$TRIVY_CACHE_DIR"


# Extends the job_image_scan job to scan all images
# Is triggered only by the schedule
job_image_scan_schedule:
  extends: .job_image_scan
  variables:
    SCAN_ALL_IMAGES: "true"
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CLAMAV_PIPELINE && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'
  artifacts:
    expose_as: "job_image_scan"
    paths:
      - "${JOB_LOGFILE}"
      - "${OUTPUT_DIR}"
    reports:
      junit:
        - "${OUTPUT_DIR}/*.xml"
    expire_in: 30 days
    when: always

# Scan only the images of the jobs that have changed on merge requests
job_image_scan:
  extends: .job_image_scan
  variables:
    SCAN_ALL_IMAGES: "false"
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CLAMAV_PIPELINE'
      when: never
    - changes:
      - "jobs/**/*${JOB_FILES_EXTENSION}"
      - "tools/job_image/**/*"

links_checker:
  variables:
    # The following hard excluded link is due that this
    # job will be migrated to a new tool soon (see #314)
    LICHE_EXCLUDE: ^([^http]|https://gitlab.com/r2devops/hub/-/forks/new)|^([^http]|https://r2devops.io/.+)|^([^http]|https://api.r2devops.io/.+)|^([^http]|https://en.wikipedia.org/wiki/Dry_run_\(testing)
    FAIL_ON_BROKEN: "true"
    LICHE_DIRECTORY: "jobs/"
  allow_failure: true

codespell:
  stage: static_tests
  variables:
    CODESPELL_DICTIONARY: ".codespell/dictionary.txt"
    #separate each file to ignore with a space
    CODESPELL_IGNORE_FILES: "./jobs/doxygen/test/src/sample.cpp"

# See https://docs.gitlab.com/ee/api/releases/
# We can only control the link to the hub, the release is still storing the source code
template_release:
  rules:
   - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'

discord_notifier:
  image:
    name: alpine/httpie:${IMAGE_TAG_HTTPIE_ALPINE}
    entrypoint: [""]
  stage: .after-deploy
  dependencies:
    - template_release
  variables:
    RELEASE_PATH: "${CI_PROJECT_DIR}/releases" 
    PIPENV_PIPFILE: tools/notify/Pipfile
  before_script:
    - apk update && apk add --no-cache bash
    - pip install --ignore-installed distlib pipenv
    - pipenv install
  script:
    - RELEASES=$(ls "$RELEASE_PATH")
    - |
      for release in $RELEASES; do
        JOB="$(echo "$release" | cut -d'@' -f1 | sed -e 's/|/\//g')"
        VERSION="$(echo "$release" | sed -E 's/.*@([0-9]+\.[0-9]+\.[0-9]+)\..*$/\1/')"
        CHANGELOG=$(cat "$RELEASE_PATH/$release")
        echo "New version detected for $JOB@$VERSION, sending notification to discord"
        pipenv run python tools/notify/discord_release_notify.py -n ${JOB} -v ${VERSION} -c "${CHANGELOG}"
      done
  rules:
   - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'

refresh_job_av_database:
  image: python:${IMAGE_TAG_PYTHON_ALPINE}
  stage: static_tests
  variables:
    PIPENV_PIPFILE: tools/job_av/Pipfile
    PYTHONPATH: "./:${PYTHONPATH}"
  script:
    - apk add --no-cache python3 py3-pip clamav util-linux
    - pip install --ignore-installed distlib pipenv
    - pipenv install

    # Updating the ClamAV database to push it into the cache
    - freshclam

    # Runner cannot access /var/lib/clamav, so we need to copy it
    # in order to cache it properly
    - mkdir freshclam_db
    - cp /var/lib/clamav/* freshclam_db
  cache:
    key: "clamav-db"
    paths:
      - freshclam_db
    policy: push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CLAMAV_PIPELINE && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'

generate_job_av:
  image: python:${IMAGE_TAG_PYTHON_ALPINE}
  stage: static_tests
  dependencies:
    - refresh_job_av_database
  variables:
    PIPENV_PIPFILE: tools/job_av/Pipfile
    JOB_LOGFILE: "generate_job.log"
    GENERATED_YAML: "generated-gitlab-ci.yml"
    PYTHONPATH: "./:${PYTHONPATH}"
    SCANNED_IMAGES_FILE: "clamav_scanned_images.json"
  script:
    - if [ $CI_CLAMAV_PIPELINE ]; then echo "[]" > ${SCANNED_IMAGES_FILE}; fi
    - if [ -f "${SCANNED_IMAGES_FILE}" ]; then cat ${SCANNED_IMAGES_FILE}; fi
    - apk add --no-cache python3 py3-pip util-linux
    - pip install --ignore-installed distlib pipenv
    - pipenv install

    - pipenv run python3 tools/job_av/job_av.py
  artifacts:
    paths:
      - ${GENERATED_YAML}
    expire_in: 30 days
    when: always
  cache:
    key: "clamav-scanned-jobs"
    paths:
      - clamav_scanned_images.json
    policy: pull-push
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CLAMAV_PIPELINE && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'

child_job_av:
  stage: merge_tests
  trigger:
    include:
      - artifact: generated-gitlab-ci.yml
        job: generate_job_av
    strategy: depend
  rules:
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_CLAMAV_PIPELINE && $CI_PROJECT_PATH_SLUG == "r2devops-hub"'
